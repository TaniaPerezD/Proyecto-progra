/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gatomaxi.vista;
import com.formdev.flatlaf.themes.FlatMacLightLaf;
import gatomaxi.modelo.ConeBD;
import gatomaxi.modelo.Combo;
import gatomaxi.modelo.Venta;
import gatomaxi.modelo.Cliente;
import gatomaxi.modelo.Autogen_Autorizacion;
import java.io.File;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.filechooser.FileSystemView;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import javax.swing.JOptionPane;
import com.itextpdf.text.Element;
import gatomaxi.modelo.Categoria;
import gatomaxi.modelo.Producto;
import gatomaxi.modelo.Proveedor;
import gatomaxi.vista.Inventario.PanelCategoria;
import gatomaxi.vista.Inventario.PanelProducto;
import javax.management.Notification;
import raven.toast.Notifications;
import gatomaxi.vista.tablas.Proveedor.PanelAnd;
import java.beans.Statement;
import raven.popup.DefaultOption;
import raven.popup.GlassPanePopup;
import raven.popup.component.PopupController;
import raven.popup.component.SimplePopupBorder;
import java.sql.*;



import java.util.ArrayList;
import java.util.List;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
//
import java.sql.*;
/**
 *
 * @author usuario
 */
public class VentanaCompra extends javax.swing.JFrame {
    public int index;
    public boolean encontrado;
    public boolean llenado=false;
    
    public String codigo;
    public int cantidad;
    public String nombreProducto;
    public int stockActua;
    public int stockMin;
    public int stockMax;
    public double precioUnitario;
    
    public int idDetalleFactura;
    public String numAutorizacion;
    public int idProducto;
    
    public int idProveedor;
     public int idCompra;
    public int idEmpleado=3;
    public int idGenerado ;
    public double total=0;
    public String descripcion;
    public int tot;
    /**
     * Creates new form VentaRegistroProductos
     */
    public VentanaCompra() {
        //this.idEmpleado=idEmpleado;
        FlatMacLightLaf.setup();
        initComponents();
        GlassPanePopup.install(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        SALIR = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        CATEGORIA = new javax.swing.JButton();
        SALIR2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        AGREGAR = new javax.swing.JButton();
        BUSCAR = new javax.swing.JButton();
        CANTIDAD = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        CODIGO = new javax.swing.JTextField();
        STOCK = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        CANCELADO = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        VUELTO = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        PAGAR = new javax.swing.JButton();
        IDCLIENTE = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        TOTAL = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(246, 224, 211));
        setForeground(new java.awt.Color(246, 224, 211));

        jPanel1.setBackground(new java.awt.Color(244, 159, 154));
        jPanel1.setForeground(new java.awt.Color(244, 159, 154));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gatomaxi/icon/user_icon.png"))); // NOI18N
        jLabel2.setText("jLabel2");

        SALIR.setBackground(new java.awt.Color(246, 190, 175));
        SALIR.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        SALIR.setForeground(new java.awt.Color(51, 51, 51));
        SALIR.setText("REGISTRAR PROVEEDOR");
        SALIR.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        SALIR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SALIRActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel4.setText("ADMIN");

        CATEGORIA.setBackground(new java.awt.Color(246, 190, 175));
        CATEGORIA.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        CATEGORIA.setForeground(new java.awt.Color(51, 51, 51));
        CATEGORIA.setText("REGISTRAR CATEGORIA");
        CATEGORIA.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        CATEGORIA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CATEGORIAActionPerformed(evt);
            }
        });

        SALIR2.setBackground(new java.awt.Color(246, 190, 175));
        SALIR2.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        SALIR2.setForeground(new java.awt.Color(51, 51, 51));
        SALIR2.setText("REGISTRAR PRODUCTO");
        SALIR2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        SALIR2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SALIR2ActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gatomaxi/icon/pngtree-grocery-store-products-categories-color-icons-set-picture-image_8249203 (2) (1).png"))); // NOI18N

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gatomaxi/icon/4003671.png"))); // NOI18N

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gatomaxi/icon/pngtree-grocery-store-products-categories-color-icons-set-picture-image_8249203 (1).png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(CATEGORIA, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(SALIR2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(SALIR)))
                .addContainerGap(44, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(84, 84, 84))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(34, 34, 34)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(SALIR, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(SALIR2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(CATEGORIA, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(246, 190, 175));
        jPanel5.setForeground(new java.awt.Color(244, 159, 154));

        jLabel3.setBackground(new java.awt.Color(255, 153, 153));
        jLabel3.setFont(new java.awt.Font("Segoe UI Black", 0, 15)); // NOI18N
        jLabel3.setText("Codigo:");

        AGREGAR.setBackground(new java.awt.Color(245, 161, 128));
        AGREGAR.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        AGREGAR.setForeground(new java.awt.Color(51, 51, 51));
        AGREGAR.setText("AGREGAR");
        AGREGAR.setEnabled(false);
        AGREGAR.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        AGREGAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AGREGARActionPerformed(evt);
            }
        });

        BUSCAR.setBackground(new java.awt.Color(245, 161, 128));
        BUSCAR.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        BUSCAR.setForeground(new java.awt.Color(51, 51, 51));
        BUSCAR.setText("BUSCAR");
        BUSCAR.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        BUSCAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BUSCARActionPerformed(evt);
            }
        });

        CANTIDAD.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        CANTIDAD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CANTIDADActionPerformed(evt);
            }
        });

        jLabel6.setBackground(new java.awt.Color(255, 153, 153));
        jLabel6.setFont(new java.awt.Font("Segoe UI Black", 0, 15)); // NOI18N
        jLabel6.setText("Cantidad:");

        CODIGO.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        CODIGO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CODIGOActionPerformed(evt);
            }
        });

        STOCK.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        STOCK.setEnabled(false);
        STOCK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                STOCKActionPerformed(evt);
            }
        });

        jLabel7.setBackground(new java.awt.Color(255, 153, 153));
        jLabel7.setFont(new java.awt.Font("Segoe UI Black", 0, 15)); // NOI18N
        jLabel7.setText("Stock:");
        jLabel7.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                jLabel7ComponentAdded(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(255, 0, 51));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton1.setText("X");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CODIGO, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CANTIDAD, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(BUSCAR)
                .addGap(45, 45, 45)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(STOCK, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(AGREGAR, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CODIGO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                            .addComponent(jLabel7)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(CANTIDAD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(STOCK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(BUSCAR, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(AGREGAR, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(32, 32, 32))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID Producto", "Nombre Producto", "Cantidad", "Precio Unitacio", "Total"
            }
        ));
        jTable1.setEnabled(false);
        jTable1.setRowHeight(25);
        jScrollPane1.setViewportView(jTable1);

        jPanel6.setBackground(new java.awt.Color(246, 190, 175));
        jPanel6.setForeground(new java.awt.Color(244, 159, 154));

        jLabel8.setBackground(new java.awt.Color(255, 153, 153));
        jLabel8.setFont(new java.awt.Font("Segoe UI Black", 0, 15)); // NOI18N
        jLabel8.setText("Proveedores:");

        CANCELADO.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        CANCELADO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CANCELADOActionPerformed(evt);
            }
        });

        jLabel9.setBackground(new java.awt.Color(255, 153, 153));
        jLabel9.setFont(new java.awt.Font("Segoe UI Black", 0, 15)); // NOI18N
        jLabel9.setText("Pagar con:");

        VUELTO.setBackground(new java.awt.Color(232, 108, 90));
        VUELTO.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        VUELTO.setForeground(new java.awt.Color(255, 255, 255));
        VUELTO.setEnabled(false);
        VUELTO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VUELTOActionPerformed(evt);
            }
        });

        jLabel10.setBackground(new java.awt.Color(255, 153, 153));
        jLabel10.setFont(new java.awt.Font("Segoe UI Black", 0, 15)); // NOI18N
        jLabel10.setText("Vuelto:");

        PAGAR.setBackground(new java.awt.Color(245, 161, 128));
        PAGAR.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        PAGAR.setForeground(new java.awt.Color(51, 51, 51));
        PAGAR.setText("PAGAR");
        PAGAR.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        PAGAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PAGARActionPerformed(evt);
            }
        });

        IDCLIENTE.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        IDCLIENTE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                IDCLIENTEMousePressed(evt);
            }
        });
        IDCLIENTE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IDCLIENTEActionPerformed(evt);
            }
        });
        IDCLIENTE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                IDCLIENTEKeyPressed(evt);
            }
        });

        jLabel11.setBackground(new java.awt.Color(255, 153, 153));
        jLabel11.setFont(new java.awt.Font("Segoe UI Black", 0, 15)); // NOI18N
        jLabel11.setText("TOTAL:");

        TOTAL.setBackground(new java.awt.Color(232, 108, 90));
        TOTAL.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        TOTAL.setForeground(new java.awt.Color(255, 255, 255));
        TOTAL.setEnabled(false);
        TOTAL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TOTALActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(IDCLIENTE, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CANCELADO, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TOTAL))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(VUELTO, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(PAGAR, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(185, 185, 185))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(PAGAR, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jLabel11)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(CANCELADO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(VUELTO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(TOTAL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(IDCLIENTE, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 781, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CANTIDADActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CANTIDADActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CANTIDADActionPerformed

    private void BUSCARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BUSCARActionPerformed
        // TODO add your handling code here:
        if((!(CODIGO.getText().isEmpty() )) || (!(CANTIDAD.getText().isEmpty() ))){
            String input = CANTIDAD.getText().trim();
            
            if (tryParseInt(input)) {
                int input1 = Integer.parseInt(CANTIDAD.getText());
                
                //System.err.println(cantidad);
                //System.err.println(stockActua);
                //System.err.println(tot);
                encontrado = false;
                //Venta venta = new Venta(CODIGO.getText(),Integer.parseInt(CANTIDAD.getText()));
                //venta.buscar(CODIGO.getText());
                buscar(CODIGO.getText());
                tot = input1 + stockActua;
                if(encontrado==true){
                    if(tot > stockMax){
                        Notifications.getInstance().show(Notifications.Type.INFO, Notifications.Location.TOP_LEFT, "El stock actual excede el stock maximo del producto");
                         //AGREGAR.setEnabled(false); 
                    }else{
                       AGREGAR.setEnabled(true); 
                    }
                    
                }else{
                    Notifications.getInstance().show(Notifications.Type.WARNING, Notifications.Location.TOP_LEFT, "El proveedor no existe o producto no existen" );
                    //Notifications.getInstance().show(Notifications.Type.WARNING,"El proveedor no existe" );
                }
            }else{
                Notifications.getInstance().show(Notifications.Type.WARNING, Notifications.Location.TOP_LEFT, "Cantidad invalida" );
                 //Notifications.getInstance().show(Notifications.Type.WARNING,"Cantidad invalida" );
            }
            
        }else{
            //Notifications.getInstance().show(Notifications.Type.WARNING,"Los campos se encuentran vacios" );
            Notifications.getInstance().show(Notifications.Type.WARNING, Notifications.Location.TOP_LEFT, "Los campos se encuentran vacios" );
        }
        
        
    }//GEN-LAST:event_BUSCARActionPerformed

    private void CODIGOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CODIGOActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CODIGOActionPerformed

    private void AGREGARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AGREGARActionPerformed
        // TODO add your handling code here:
        /*Venta venta = new Venta(CODIGO.getText(),Integer.parseInt(CANTIDAD.getText()));
        venta.actualizarStock();*/
        
        if(llenado==false){
            Notifications.getInstance().show(Notifications.Type.WARNING,"El proveedor se encuentra vacio" );
            //JOptionPane.showMessageDialog(null,"Ingrese el proveedor primero");  
        }
        else{
            actualizarStock();
            if(jTable1.getValueAt(0,1)==null){
                index=0;
            }
            jTable1.setValueAt((idProducto) , index , 0);
            jTable1.setValueAt((nombreProducto), index, 1);
            jTable1.setValueAt((descripcion), index, 2);
            jTable1.setValueAt((precioUnitario), index, 3);
            jTable1.setValueAt((cantidad*precioUnitario), index, 4);
            index++;
            
            insertCompra();
            
            total+= (cantidad*precioUnitario);
            insertDetalleCompra();
        }
        //jTable1.
    }//GEN-LAST:event_AGREGARActionPerformed

    private void STOCKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_STOCKActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_STOCKActionPerformed

    private void CANCELADOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CANCELADOActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CANCELADOActionPerformed

    private void IDCLIENTEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IDCLIENTEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IDCLIENTEActionPerformed

    private void IDCLIENTEKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_IDCLIENTEKeyPressed
        // TODO add your handling code here:
        System.out.println("Se ha podido llenar los clientes");
        llenarProveedor();
        System.out.println("Se ha podido llenar los clientes");
    }//GEN-LAST:event_IDCLIENTEKeyPressed

    private void IDCLIENTEMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IDCLIENTEMousePressed
        // TODO add your handling code here:
        if(llenado==false){
            System.out.println("Se ha podido llenar los clientes");
            llenarProveedor();
            System.out.println("Se ha podido llenar los clientes");
            llenado=true;
        }
        
    }//GEN-LAST:event_IDCLIENTEMousePressed

    private void VUELTOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VUELTOActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_VUELTOActionPerformed

    private void TOTALActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TOTALActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TOTALActionPerformed

    private void PAGARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PAGARActionPerformed
        // TODO add your handling code here:
        if(!(CANCELADO.getText().isEmpty() )){
            try {
                String input = CANCELADO.getText().trim();
                if (tryParseDouble(input)) {
                    int cantidad = Integer.parseInt(input);
                    // Aquí puedes usar la variable "cantidad" como entero
                    System.out.println("Cantidad ingresada: " + cantidad);
                    double cancelado = Double.parseDouble(CANCELADO.getText());
                    if(cancelado > total){
                        TOTAL.setText(""+total);
                        VUELTO.setText(""+(cancelado-total));
                    }else{
                        Notifications.getInstance().show(Notifications.Type.WARNING, Notifications.Location.TOP_LEFT, "Ingrese un valor con el que pagar o un valor valido");
                       // Notifications.getInstance().show(Notifications.Type.WARNING,"Ingrese un valor con el que pagar o un valor valido" );
                    }
                }else{
                    //Notifications.getInstance().show(Notifications.Type.WARNING,"Ingrese un valor con el que pagar o un valor valido" );
                    Notifications.getInstance().show(Notifications.Type.WARNING, Notifications.Location.TOP_LEFT, "Ingrese un valor con el que pagar o un valor valido");
                }
                
            } catch (NumberFormatException nfe) {
                Notifications.getInstance().show(Notifications.Type.WARNING, Notifications.Location.TOP_LEFT, "Ingrese un valor con el que pagar o un valor valido");
                //Notifications.getInstance().show(Notifications.Type.WARNING,"Ingrese un valor con el que pagar o un valor valido" );
                //JOptionPane.showMessageDialog(null,"Ingrese un valor con el que pagar o un valor valido");  
            }
        }
        else{
            Notifications.getInstance().show(Notifications.Type.WARNING, Notifications.Location.TOP_LEFT, "Ingrese un valor con el que pagar o un valor valido");
            //Notifications.getInstance().show(Notifications.Type.WARNING,"Ingrese un valor con el que pagar o un valor valido" );
            //JOptionPane.showMessageDialog(null,"Ingrese un valor con el que pagar o un valor valido");  
        }
    }//GEN-LAST:event_PAGARActionPerformed

    private void jLabel7ComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_jLabel7ComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel7ComponentAdded

    private void SALIRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SALIRActionPerformed
        // TODO add your handling code here:
        //TablaProveedor venprov = new TablaProveedor();
        //venprov.setVisible(true);
        
        PanelAnd anadir = new PanelAnd();
       
        DefaultOption option = new DefaultOption() {
            @Override
            public boolean closeWhenClickOutside() {
                return true;
            }
        };
        String actions[] = new String[]{"Cancelar", "Guardar"};
        GlassPanePopup.showPopup(new SimplePopupBorder(anadir, "Añadir proveedor", actions, (PopupController pc, int i) -> {
            if (i == 1) {              
                try {
                    Proveedor nuevo = new Proveedor();
                    nuevo = anadir.tomarDatos();
                    nuevo.altas();
                    
                    pc.closePopup();
                    //Notifications.getInstance().show(Notifications.Type.SUCCESS,, Notifications.Location.TOP_LEFT, "¡Proveedor nuevo!");
                    Notifications.getInstance().show(Notifications.Type.SUCCESS, "¡Proveedor nuevo!");
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                pc.closePopup();
            }
        }), option);
        
    }//GEN-LAST:event_SALIRActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        VentanaAdmin admi = new VentanaAdmin();
        admi.setVisible(true);
        dispose();
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void SALIR2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SALIR2ActionPerformed
        PanelProducto anadir = new PanelProducto();

        DefaultOption option = new DefaultOption() {
            @Override
            public boolean closeWhenClickOutside() {
                return true;
            }
        };

        String[] actions = new String[]{"Cancelar", "Guardar"};
        GlassPanePopup.showPopup(new SimplePopupBorder(anadir, "Añadir producto", actions, (pc, i) -> {
            if (i == 1) {
                try {
                    Producto nuevo = anadir.tomarDatos();
                    nuevo.altas();
                    pc.closePopup();
                    Notifications.getInstance().show(Notifications.Type.SUCCESS, "¡Producto nuevo!");
                } catch (IllegalArgumentException e) {
                } catch (Exception e) {
                    e.printStackTrace();
                    Notifications.getInstance().show(Notifications.Type.ERROR, "Ocurrió un error al guardar el producto.");
                }
            } else {
                pc.closePopup();
            }
        }), option);
    }//GEN-LAST:event_SALIR2ActionPerformed

    private void CATEGORIAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CATEGORIAActionPerformed
      PanelCategoria anadir = new PanelCategoria();
       
        DefaultOption option = new DefaultOption() {
            @Override
            public boolean closeWhenClickOutside() {
                return true;
            }
        };
        String actions[] = new String[]{"Cancelar", "Guardar"};
        GlassPanePopup.showPopup(new SimplePopupBorder(anadir, "Añadir categoría", actions, (pc, i) -> {
            if (i == 1) {              
                try {
                    String [] datos = anadir.tomarDatos();
                    
                    Categoria nuevo = new Categoria();
                    
                    nuevo.nuevaCategoria(datos[0], datos[1],datos[2]);
                    pc.closePopup();
                    Notifications.getInstance().show(Notifications.Type.SUCCESS, "¡Categoria nueva!");
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                pc.closePopup();
            }
        }), option);
    }//GEN-LAST:event_CATEGORIAActionPerformed

   

    
    public void buscar(String codigo_barra) {
        
        String query = "SELECT id_producto,nombre,descripcion,precio_compra,stock_actual,stock_maximo FROM PRODUCTO WHERE codigo_barra = ? AND estado = ?";
        ConeBD conn = new ConeBD();
        Connection connection = conn.conectar();
        //System.out.println("CODIGO: "+codigo);
        codigo = CODIGO.getText();
        cantidad = Integer.parseInt(CANTIDAD.getText());
        //System.out.println("CODIGO: "+codigo1);
        if (connection != null) {
            PreparedStatement pst = null;
            ResultSet rs = null;

            try {
                pst = connection.prepareStatement(query);
                pst.setString(1, codigo);
                pst.setString(2, "Activo");
                
                rs = pst.executeQuery();

                if (rs.next()) {
                    // Leer los valores de las columnas que necesitamos
                    idProducto = rs.getInt("id_producto");
                    
                    nombreProducto = rs.getString("nombre");
                    descripcion = rs.getString("descripcion");
                    precioUnitario = rs.getDouble("precio_compra");
                    stockActua = rs.getInt("stock_actual");
                    stockMax = rs.getInt("stock_maximo");
                    
                    encontrado=true;
                    
                } else {
                    System.out.println("No se encontró ningún producto con el código de barras especificado o no cumple con las condiciones.");
                }

            } catch (SQLException ex) {
                ex.printStackTrace();
            } finally {
                try {
                    if (rs != null) {
                        rs.close();
                    }
                    if (pst != null) {
                        pst.close();
                    }
                    if (connection != null) {
                        connection.close();
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }
   
    
     public void actualizarStock() {
        String query = "UPDATE PRODUCTO SET stock_actual = ? WHERE codigo_barra = ?";
        System.out.println(codigo);
        ConeBD conn = new ConeBD();
        Connection connection = conn.conectar();

        if (connection != null) {
            PreparedStatement pst = null;
            ResultSet rs = null;

            try {
                int stock= stockActua+cantidad; 
                pst = connection.prepareStatement(query);
                pst.setInt(1, stock);
                pst.setString(2, codigo);
                
                int affectedRows = pst.executeUpdate();
                System.out.println("Filas afectadas: " + affectedRows);

            } catch (SQLException ex) {
                ex.printStackTrace();
            } finally {
                try {
                    if (rs != null) {
                        rs.close();
                    }
                    if (pst != null) {
                        pst.close();
                    }
                    if (connection != null) {
                        connection.close();
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }
    
    
    
    
    public void llenarProveedor(){
        ArrayList <Proveedor> listProveedor =listarProveedor();
        for(int i=0;i<listProveedor.size();i++){
            int id = listProveedor.get(i).getIdProveedor();
            String razon = listProveedor.get(i).getRazonSocial();
            System.out.println(razon);

            IDCLIENTE.addItem(new Combo(id,razon));
        }
    }
    
    public ArrayList <Proveedor> listarProveedor(){
        ArrayList <Proveedor> listProveedor = new  ArrayList<>();
        String sql = "SELECT * FROM proveedor";
        ResultSet rs = null;
        ConeBD conn = new ConeBD();
        Connection connection = conn.conectar();

        if(connection != null){
            try {
                PreparedStatement pst = connection.prepareStatement(sql);
                rs = pst.executeQuery();
                while(rs.next()){
                    Proveedor pro = new Proveedor();
                    pro.setIdProveedor(rs.getInt("id_proveedor"));
                    pro.setNombre(rs.getString("nombre"));
                    pro.setDireccion(rs.getString("direccion"));
                    pro.setTelefono(rs.getInt("telefono"));
                    pro.setEmail(rs.getString("email"));
                    pro.setRazonSocial(rs.getString("razon_social"));
                    pro.setCedula(rs.getString("cedula_ruc"));
                    pro.setEstado(rs.getString("estado"));
                    listProveedor.add(pro);
                    //listCliente.add(Integer.parseInt(rs.getString("nit")));
                }
                rs.close();
                pst.close(); 
                
            } catch (Exception ex) {
                 ex.printStackTrace();
            } finally {
            try {
                if (conn != null) {
                    connection.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
                }
            }
        }
        return listProveedor;
    }
    
    
    
    public void cambio(){
        
    }
    // Método para intentar convertir una cadena a entero
    private static boolean tryParseInt(String value) {
        try {
            Integer.parseInt(value);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }
    
    // Método para intentar convertir una cadena a double
    private static boolean tryParseDouble(String value) {
        try {
            Double.parseDouble(value);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AGREGAR;
    private javax.swing.JButton BUSCAR;
    private javax.swing.JTextField CANCELADO;
    private javax.swing.JTextField CANTIDAD;
    private javax.swing.JButton CATEGORIA;
    private javax.swing.JTextField CODIGO;
    public javax.swing.JComboBox<Object> IDCLIENTE;
    private javax.swing.JButton PAGAR;
    private javax.swing.JButton SALIR;
    private javax.swing.JButton SALIR2;
    private javax.swing.JTextField STOCK;
    private javax.swing.JTextField TOTAL;
    private javax.swing.JTextField VUELTO;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
  
    
    public void insertDetalleCompra() {
        String query = "INSERT INTO detalle_compra (cantidad,id_producto ,codigo_barra,id_compra)";
        query+= "VALUES (?,?,?,?)";
        ConeBD conn = new ConeBD();
        Connection connection = conn.conectar();

        if (connection != null) {
            PreparedStatement pst = null;
            

            try {
                pst = connection.prepareStatement(query);
                pst.setInt(1, cantidad);
                pst.setInt(2, idProducto);
                pst.setString(3, codigo);
                pst.setInt(4, idGenerado);
                int affectedRows = pst.executeUpdate();
                System.out.println("Filas afectadas: " + affectedRows);
                
                pst.close();

            } catch (SQLException ex) {
                ex.printStackTrace();
            } finally {
                try {
                    if (pst != null) {
                        pst.close();
                    }
                    if (connection != null) {
                        connection.close();
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }
    
    
    /*public void insertCompra() {
        Combo id_c = (Combo)IDCLIENTE.getSelectedItem();
        System.out.println(id_c.getId());
        int id_provee = id_c.getId();
        idProveedor=id_provee;
   //  String query = "INSERT INTO compra (id_proveedor,fecha)";
   //   query+= "VALUES (?,NOW())";
        ConeBD conn = new ConeBD();
        Connection connection = conn.conectar();
        
     // ResultSet rs = null;
        if (connection != null) {
            PreparedStatement pst = connection.prepareStatement("INSERT INTO compra (id_proveedor,fecha) VALUES (?,NOW())",Statement.RETURN_GENERATED_KEYS);
          //PreparedStatement pst = null;
            

            try {
             //pst = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS); 
            //pst = connection.prepareStatement(query);
                pst.setInt(1, idProveedor);
                //pst.setString(4, codigo);
                
              int affectedRows = pst.executeUpdate();
                System.out.println("Filas afectadas: " + affectedRows);
                
                  // Obtener el id de la categoría insertada
                ResultSet generatedKeys = pst.getGeneratedKeys();
                if (generatedKeys.next()) {
                    int categoryId = generatedKeys.getInt(1);
                    rs = pst.getGeneratedKeys();
                if (rs.next()) {
                    idGenerado = rs.getInt(1);
                    System.out.println("ID generado: " + idGenerado);
                }else{
                    System.out.println("No se pudo obtener el ID generado");
                }
               //st.close();
              //rs.close();
              pst.executeUpdate();
                ResultSet generatedKeys = pst.getGeneratedKeys();
            if (generatedKeys.next()) {
                idGenerado = generatedKeys.getInt(1);
            }
              
              
            } catch (SQLException ex) {
                ex.printStackTrace();
            } finally {
                try {
                    if (pst != null) {
                        pst.close();
                    }
                    if (connection != null) {
                        connection.close();
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        if (idGenerado != -1){
            insertDetalleCompra(); // Llama al método para insertar el detalle de compra usando el ID de la compra
        }else{
            System.err.println("Noe entra");
        }
    }*/
    
    public void insertCompra() {
         ///
        Connection conn = null;
        
        //
        Combo id_c = (Combo)IDCLIENTE.getSelectedItem();
        System.out.println(id_c.getId());
        int id_provee = id_c.getId();
        idProveedor=id_provee; 
        try {
            ConeBD c = new ConeBD();
            conn = c.conectar();
            ////QUERYS PARA REALIZAR LAS CONSULTAS, SE NECESITA EL ID DE CATEGORIA PARA LA CONCORDANCIA DE SUBCATEGORIA
            PreparedStatement categoriaStmt = conn.prepareStatement("INSERT INTO compra (id_proveedor,fecha) VALUES (?,NOW())", java.sql.Statement.RETURN_GENERATED_KEYS);///me va retornar lo auto generado
            conn.setAutoCommit(false); // Iniciar la transacción

            // Insertar categoría
            categoriaStmt.setInt(1, idProveedor);
            //categoriaStmt.setString(2, descripCate);
            categoriaStmt.executeUpdate();

            // Obtener el id de la categoría insertada
            ResultSet generatedKeys = categoriaStmt.getGeneratedKeys();
            if (generatedKeys.next()) {
                idGenerado = generatedKeys.getInt(1);

                
            }else{
                System.err.println("Transaccion");
            }

            conn.commit(); // Confirmar la transacción

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
   
    
    
   
}
